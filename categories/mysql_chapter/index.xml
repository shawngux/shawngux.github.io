<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mysql_chapter on Shawngu的网络日志</title>
    <link>https://shawngu.com/categories/mysql_chapter/</link>
    <description>Recent content in mysql_chapter on Shawngu的网络日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 May 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://shawngu.com/categories/mysql_chapter/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySQL常用优化概述</title>
      <link>https://shawngu.com/2017/05/mysql%E5%B8%B8%E7%94%A8%E4%BC%98%E5%8C%96%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shawngu.com/2017/05/mysql%E5%B8%B8%E7%94%A8%E4%BC%98%E5%8C%96%E6%A6%82%E8%BF%B0/</guid>
      <description>MySQL优化一般从四个层面着手。
设计 设计方面包括字段类型的选择、存储引擎的选择、特定范式
字段选择 在满足需求的情况下：
 选择短数据类型：占用存储空间小 选择定长数据类型：占用固定的存储空间，运行速度比较快 使用整数替代字符串：整数的计算效率高，有时也会节省存储空间；如：性别sex使用tinyint类型要比enum类型或字符串效率高 限定表的字段数量：一个表字段数量尽量不要超过30个 字段设置NOT NULL：字段为null时，存储和计算都需要额外的特殊处理；如 null参与运算结果都为null，存储时也会消耗一定的空间。所以设置为not null，配合 default 使用注释：保证完整性 使用一些通过字段：如id、create_at、update_at等  存储引擎 MySQL中常用的存储引擎有：Myisam、InnoDB。推荐使用InnoDB。
1、Myisam和InnoDB的存储方式：
 Myisam：  Myisam将数据和索引分别存储在不同的文件中，数据文件格式为xxx.MYD，索引文件格式为xxx.MYI，结构文件为xxx.frm。
记录的存储顺序就是插入记录时的顺序。
 InnoDB：  InnoDB将数据和索引存储在一个文件中，格式为xxx.ibd（称为表空间文件）、以及一个结构结构文件xxx.frm。之外还包含公共的innodb文件。
记录的存储顺序是主键值顺序。
MySQL新版中每个表有一个表空间文件，如果不是，可通过指令来设置
-- 查看是否开启 SHOW VARIABLES LIKE &amp;quot;innodb_file_per_table&amp;quot;; /* +-----------------------+-------+ | Variable_name | Value | +-----------------------+-------+ | innodb_file_per_table | OFF | +-----------------------+-------+ */ -- 开启 SET GLOBAL innodb_file_per_table = ON;  注：Myisam的文件可以通过拷贝的方式备份，而InnoDB的文件只能通过mysqldump导出部分。
2、事务和并发支持
Myisam不支持事务，InnoDB支持事务，是事务安全型存储引擎。
InnoDB的并发性优于Myisam，因为InnoDB支持ROW-LEVEL（行级）锁定，一次仅仅锁定操作的行，InnoDB支持MVCC（多版本控制），几乎可以做到无阻塞读操作。而Myisam仅仅支持TABLE-LEVEL（表级）锁定，只能锁定全表。
范式 范式，即规范。数据库设计时遵循的规则。数据库设计中，目前依据级别定义有：1NF、2NF、3NF、4NF、5NF、6NF这6个范式。后面的每一个范式都必须满足前面的范式。
而我们设计数据库时，一般满足前3个范式。
1、第一范式（1NF）&amp;ndash; 原子性：</description>
    </item>
    
    <item>
      <title>MySQL用户管理</title>
      <link>https://shawngu.com/2017/05/mysql%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</link>
      <pubDate>Fri, 05 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shawngu.com/2017/05/mysql%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86/</guid>
      <description>在MySQL数据库系统中，用户存储在mysql库的user表中，即mysql.user。
SHOW CREATE TABLE mysql.user \G -- 结构 /* Create Table: CREATE TABLE `user` ( `Host` char(60) COLLATE utf8_bin NOT NULL DEFAULT &#39;&#39;, `User` char(16) COLLATE utf8_bin NOT NULL DEFAULT &#39;&#39;, `Password` char(41) CHARACTER SET latin1 COLLATE latin1_bin NOT NULL DEFAULT &#39;&#39;, `Select_priv` enum(&#39;N&#39;,&#39;Y&#39;) CHARACTER SET utf8 NOT NULL DEFAULT &#39;N&#39;, 。。。 PRIMARY KEY (`Host`,`User`) ) ENGINE=MyISAM DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#39;Users and global privileges&#39;; */  其中：
 Host：表示用户登录的ip User：用户名 Password：用密码，通过password加密 xxx_priv：权限，值为Y代表用户有这个权限，N代表没有这个权限  创建用户 格式： &amp;gt; CREATE USER &amp;lsquo;username&amp;rsquo;@&amp;lsquo;ip&amp;rsquo; IDENTIFIED BY &amp;lsquo;password&amp;rsquo;</description>
    </item>
    
    <item>
      <title>MySQL事务和存储引擎</title>
      <link>https://shawngu.com/2017/05/mysql%E4%BA%8B%E5%8A%A1%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shawngu.com/2017/05/mysql%E4%BA%8B%E5%8A%A1%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description>事务 事务是用来保证数据的一致性的，它由一组相关的DML语句组成，这组DML语句要么全部执行成功，要么全部失败。如：银行转账业务，即为典型的事务应用场景。
事务的几个重要操作：
 start transaction: 开始一个事务 savepoint：设置一个保存点 rollback to：回退掉某个保存点 commit：事务提交，执行指令  注：如果没有设置保存点，事务开始时会自动创建一个匿名保存点；当有多个保存点时，事务回退需要依次回退，回退到前面的保存点，后面的即被销毁。要使用事务，存储引擎必须支持事务，MySQL中一般选择INNODB。
创建一张测试表
CREATE TABLE `users` ( id int unsigned primary key auto_increment comment &#39;自增编号&#39;, name varchar(32) not null default &#39;&#39; comment &#39;姓名&#39;, age smallint unsigned not null default 0 comment &#39;年龄&#39; )CHARSET=utf8 COLLATE=utf8_general_ci;  事务操作，测试回退
-- 开始事务 START TRANSACTION; -- 设置不自动提交 SET AUTOCOMMIT = false; -- 设置保存点 SAVEPOINT st; -- 一组dml语句 INSERT INTO `users` (name, age) VALUES (&#39;tom&#39;, 25), (&#39;jack&#39;, 24), (&#39;rose&#39;, 21), (&#39;lucy&#39;, 26); DELETE FROM `users` WHERE id = 2; 这个时候指令还没有真正执行，我们可以回退到保存点 ROLLBACK TO st; SELECT * FROM `users`; /* Empty set (0.</description>
    </item>
    
    <item>
      <title>MySQL约束和索引</title>
      <link>https://shawngu.com/2017/05/mysql%E7%BA%A6%E6%9D%9F%E5%92%8C%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Mon, 01 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shawngu.com/2017/05/mysql%E7%BA%A6%E6%9D%9F%E5%92%8C%E7%B4%A2%E5%BC%95/</guid>
      <description>约束 在设计表时，我们往往需要字段满足某个条件，如该字段值不能重复、不能为空等，这些都是约束。
分类：
 主键约束（primary key） 唯一约束（unique） 不为空约束（not null） 外键约束（foreign key），一般不设置，表与表之间的主从关系从开发人员维护  主键约束 关键字：PRIMARY KEY
使用：
-- 建表时设置主键约束 CREATE TABLE `users` ( id int unsigned primary key )CHARSET=utf8 COLLATE=utf8_general_ci; -- 或在最后语句中设置 CREATE TABLE `users` ( id int unsigned， primary key(id) )CHARSET=utf8 COLLATE=utf8_general_ci;  注：当字段设置为主键后，主键的字段默认不能null，且值不能重复。一张表只能有一个主键，但可以设置复合主键。
复合主键：
-- id和name两个字段组成一个复合主键 CREATE TABLE `users` ( id int unsigned， name varchar(32), primary key(id, name) )CHARSET=utf8 COLLATE=utf8_general_ci;  唯一约束 关键字：UNIQUE
使用：
CREATE TABLE `users` ( id int unsigned primary key, name varchar(32) unique )CHARSET=utf8 COLLATE=utf8_general_ci;  注：字段设置唯一约束后，该字段值不能重复。如何未设置不为空约束，该字段可为null。一张表可以设置多个唯一约束。</description>
    </item>
    
    <item>
      <title>MySQL查询中使用流程控制函数及多表查询</title>
      <link>https://shawngu.com/2017/04/mysql%E6%9F%A5%E8%AF%A2%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%87%BD%E6%95%B0%E5%8F%8A%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Sun, 30 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shawngu.com/2017/04/mysql%E6%9F%A5%E8%AF%A2%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E5%87%BD%E6%95%B0%E5%8F%8A%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</guid>
      <description>流程控制 在MySQL查询中，可以通过使用流程控制函数进行过滤或做一些额外的操作
IF IF(expr1, expr2, expr3)，如果expr1为True，则返回expr2，否则返回expr3。如：
SELECT name, IF(salary is null, 0.0, salary) FROM emps;  IFNULL IFNULL(expr1, expr2)，如果expr1为null值，则返回expr2。如：
SELECT sum(IFNULL(chiness, 0) + IFNULL(math, 0)) AS total FROM students;  CASE&amp;hellip;WHEN&amp;hellip;THEN&amp;hellip;ELSE&amp;hellip;END CASE&amp;hellip;WHEN&amp;hellip;，条件分支
SELECT name, ( CASE WHEN salary &amp;lt;= 5000 THEN salary * 1.5 WHEN salary &amp;lt;= 8000 THEN salary * 1.2 WHEN salary &amp;gt;8000 AND salary &amp;lt;= 10000 THEN salary * 1.1 ELSE salary END ) AS updSalary FROM emps;  其他的一些细节描述可参考：https://dev.</description>
    </item>
    
    <item>
      <title>MySQL表数据的查询（select）</title>
      <link>https://shawngu.com/2017/04/mysql%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9F%A5%E8%AF%A2select/</link>
      <pubDate>Sat, 29 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shawngu.com/2017/04/mysql%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9F%A5%E8%AF%A2select/</guid>
      <description>查询select是数据库中最重要的部分。也是开发中最常见的功能。
简单查询 即单表查询
基本语法  SELECT [DISTINCT] * ¦ {col1, col2, col3, &amp;hellip;} FROM table_name [WHERE where_expr] [GROUP BY {col_name ¦ expr} [ASC ¦ DESC]] [HAVING where_condition] [ORDER BY&amp;gt; {col_name ¦ expr} [ASC ¦ DESC]] [LIMIT row_count]
 其中：
 红色字为关键字，一般大写 []的内容可有可无，基本都为过滤条件 distinct表示过滤掉重复的记录 *表示查询所有字段，一般不用，效率太低  在查询之前先创建一张表，并插入一些数据
-- 创建一张users表，用来查询 CREATE TABLE `users` ( id int(8) unsigned not null default 0 comment &#39;编号&#39;, name varchar(32) not null default &#39;&#39; comment &#39;姓名&#39;, age smallint(4) unsigned not null default 0 comment &#39;年龄&#39;, address varchar(64) not null default &#39;&#39; comment &#39;地址&#39;, profile text comment &#39;个人介绍&#39; )CHARSET=utf8 COLLATE utf8_general_ci; -- 显示表创建时的结构 SHOW CREATE TABLE `users` \G /* *************************** 1.</description>
    </item>
    
    <item>
      <title>MySQL表数据的插入、修改、删除操作（crud之cud操作）</title>
      <link>https://shawngu.com/2017/04/mysql%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8F%92%E5%85%A5%E4%BF%AE%E6%94%B9%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9Ccrud%E4%B9%8Bcud%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shawngu.com/2017/04/mysql%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8F%92%E5%85%A5%E4%BF%AE%E6%94%B9%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9Ccrud%E4%B9%8Bcud%E6%93%8D%E4%BD%9C/</guid>
      <description>所谓的crud是指：
c(create): 添加、r(read): 读取、u(update): 修改、d(delete): 删除。
其中cud在MySQL中对应(insert、update、delete)，即DML。
insert 插入数据操作。
基本语法  INSERT INTO  table_name [(col_name, col_name, &amp;hellip;)] VALUES (val, val, &amp;hellip;), &amp;hellip;
 其中：
 红色的为关键字 col_name要和val一一对应，省略col_name时，表示所有字段都插入数据。 insert也可以一次性插入多条记录  -- 插入一条记录 INSERT INTO `users` (id, name, profile) VALUES (1, &#39;peter&#39;, &#39;this is peter&#39;); -- 插入多条记录 INSERT INTO `users` (id, name, profile) VALUES (2, &#39;lucy&#39;, &#39;this is lucy&#39;), (3, &#39;jack&#39;, &#39;this is jack&#39;), (4, &#39;tom&#39;, &#39;this is tom&#39;); -- 查询结果 SELECT * FROM `users`; /* +----+-------+---------------+ | id | name | profile | +----+-------+---------------+ | 1 | peter | this is peter | | 2 | lucy | this is lucy | | 3 | jack | this is jack | | 4 | tom | this is tom | +----+-------+---------------+ 4 rows in set (0.</description>
    </item>
    
    <item>
      <title>MySQL数据表的操作（增加、修改、删除字段）</title>
      <link>https://shawngu.com/2017/04/mysql%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%8A%A0%E4%BF%AE%E6%94%B9%E5%88%A0%E9%99%A4%E5%AD%97%E6%AE%B5/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shawngu.com/2017/04/mysql%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%9A%84%E6%93%8D%E4%BD%9C%E5%A2%9E%E5%8A%A0%E4%BF%AE%E6%94%B9%E5%88%A0%E9%99%A4%E5%AD%97%E6%AE%B5/</guid>
      <description>在项目开发过程中，我们的需求有时会发生变化，如修改表名、新增表字段、删除表字段、修改表字段等。对表的字段或相关结构的操作可通过ALTER语句来实现。
基本语法：
1、新增字段
 ALTER TABLE table_name ADD [COLUMN] col_name column_definition [FIRST ¦ AFTER col_name]
 其中：
 红色字为关键字，固定。 []里的表示可有可无 table_name表示表名，col_name表示列（字段）名，column_definitin字段描述 first表示让该字段位于第一个，这个时候就不能有后面的col_name，after表示在字段col_name之后。  CREATE TABLE `users` ( id int unsigned not null default 0 comment &#39;编号&#39;, name varchar(32) not null default &#39;&#39; comment &#39;名字&#39; )CHARSET=utf8 COLLATE utf8_general_ci; -- 给`users`表name字段后面增加profile字段 ALTER TABLE `users` ADD profile varchar(256) not null default &#39;&#39; comment &#39;个人描述&#39; AFTER name; DESC `users`; -- 表信息 /* +---------+------------------+------+-----+---------+-------+ | Field | Type | Null | Key | Default | Extra | +---------+------------------+------+-----+---------+-------+ | id | int(10) unsigned | NO | | 0 | | | name | varchar(32) | NO | | | | | profile | varchar(256) | NO | | | | +---------+------------------+------+-----+---------+-------+ 3 rows in set (0.</description>
    </item>
    
    <item>
      <title>MySQL数据类型之日期时间类型</title>
      <link>https://shawngu.com/2017/04/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shawngu.com/2017/04/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E7%B1%BB%E5%9E%8B/</guid>
      <description>日期时间类型也是常用的数据类型，而用的最多的有：date、datetime、timestamp。
date date类型用来存储日期，没有时间，存储的格式为&amp;lsquo;YYYY-MM-DD&amp;rsquo;，而支持的日期范围为&amp;lsquo;1000-01-01&amp;rsquo; ~ &amp;lsquo;9999-12-31&amp;rsquo;。
CREATE TABLE `users` ( id int unsigned not null default 0, name varchar(32) not null default &#39;&#39;, birthday date not null default &#39;1900-01-01&#39; )CHARSET=utf8; INSERT INTO `users` (id, name, birthday) VALUES (1, &#39;tom&#39;, &#39;1993-02-10&#39;); SELECT * FROM `users`; -- 返回信息 /* +----+------+------------+ | id | name | birthday | +----+------+------------+ | 1 | tom | 1993-02-10 | +----+------+------------+ */  datetime datetime类型存储日期和时间，存储格式为&amp;lsquo;YYYY-MM-DD HH:MM:SS&amp;rsquo;，支持的范围为&amp;lsquo;1000-01-01 00:00:00&amp;rsquo; ~ &amp;lsquo;9999-12-31 23:59:59&amp;rsquo;。</description>
    </item>
    
    <item>
      <title>MySQL数据类型之枚举（enum）和集合（set）类型</title>
      <link>https://shawngu.com/2017/04/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%9E%9A%E4%B8%BEenum%E5%92%8C%E9%9B%86%E5%90%88set%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shawngu.com/2017/04/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%9E%9A%E4%B8%BEenum%E5%92%8C%E9%9B%86%E5%90%88set%E7%B1%BB%E5%9E%8B/</guid>
      <description>枚举（enum） 枚举类型就是一个字符串对象，在创建表时，枚举的所有值都被定义好放到一个列表中，该类型字段只要从列表中取得枚举的值即可，如：
CREATE TABLE `shirts` ( name VARCHAR(40), size ENUM(&#39;x-small&#39;, &#39;small&#39;, &#39;medium&#39;, &#39;large&#39;, &#39;x-large&#39;) ); INSERT INTO `shirts` (name, size) VALUES (&#39;dress shirt&#39;,&#39;large&#39;), (&#39;t-shirt&#39;,&#39;medium&#39;), (&#39;polo shirt&#39;,&#39;small&#39;); SELECT name, size FROM `shirts` WHERE size = &#39;medium&#39;; -- 返回信息 /* +---------+--------+ | name | size | +---------+--------+ | t-shirt | medium | +---------+--------+ */  注：枚举类型，可看成是“单选”类型，最直观的就是对应网页表单中的“单选项”的值。MySQL出于对象效率的考虑，枚举值列表中的每一项在MySQL中都是存储其对应的索引数字，如第一项对应于1，第二项对应于2，依次类推，最多存储的是65535个。如果枚举值为null，则对应索引为null，值为空字符串时，对应索引为0。
集合（set） 集合类型也是一个字符串类型，但是它可以有0个或者多个值，其值也是从创建表时就定义好的集合列表中取得。如：
CREATE TABLE `profiles` ( name varchar(32), hobbies set(&#39;football&#39;, &#39;basketball&#39;, &#39;pingpong&#39;, &#39;computer&#39;, &#39;swimming&#39;) ); INSERT INTO `profiles` (name, hobbies) VALUES (&#39;tom&#39;, &#39;computer,swimming&#39;); INSERT INTO `profiles` (name, hobbies) VALUES (&#39;jack&#39;, &#39;&#39;); SELECT * FROM `profiles`; -- 显示信息 /* +------+-------------------+ | name | hobbies | +------+-------------------+ | tom | computer,swimming | | jack | | +------+-------------------+ */  而如果使用MySQL函数来查询集合值，应当使用find_in_set(value,fields)，其中fields是一个字符串，用逗号隔开，而返回值是其在集合中的索引，即第几个。如：</description>
    </item>
    
    <item>
      <title>MySQL数据类型之字符串类型</title>
      <link>https://shawngu.com/2017/04/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 24 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shawngu.com/2017/04/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B/</guid>
      <description>在MySQL中，字符串类型是常见的数据类型，而字符串中用的最多的要数：char(size)、varchar(size)、text这三种。如：
CREATE TABLE `user_info` ( id int unsigned not null default 0, name varchar(32) not not null default &#39;&#39;, sex char(2) not null default &#39;男&#39;, profile text )  细节说明：
1、char(size)和varchar(size)中size范围：
 char(size)中，size的范围为 1~255 varchar(size)中，size范围是变化的，主要和表所选的编码有关：
 如表的字符编码为utf8时，size的最大值则为 (65535-3)/3 = 21844。解释：在varchar中，有2个字节用于记录varchar保存的内容长度，1个字节用来记录该varchar是否为null，而utf8编码采用三个字节保存一个字符，所以除以3。 当表的字符编码为gbk时，size的最大值为 (65535-3)/3 = 32766。解释：gbk使用两个字节保存一个字符，所以除以2。 而当表的字符编码为latin1时，size的最大值则为 (65535-3)/1 = 65532。解释：因为latin1使用一个字节保存一个字符，所以除以1。  注：char(size)和varchar(size)中，size指的是存放的字符数，而不是字节。
  2、char和varchar的不同之处：
 char(size)表示的是定长的字符串，如char(4)，这个时候即使我们插入&amp;rsquo;ab&amp;rsquo;(不足4个)，它也占4个字符的长度。 varchar(size)表示的是变长的字符串，如varchar(1000)，当我们插入&amp;rsquo;abcd&amp;rsquo;时，实际占用的空间为四个字符的长度+1个字节（因为varchar除了保存值时，还要使用一个字节来记录长度），举个栗子：假设我们的表字符编码为utf8，存储了&amp;rsquo;abcd&amp;rsquo;，这个时候所占空间为 s = 4 * 3 + 1 = 13 个字节（utf8中一个字符使用3个字节表示）。  3、char类型在存储内容时，如果内容的末尾是空格，则该空格就会丢失掉，而varchar会保留末尾的空格。如：
CREATE TABLE `test` ( char_content char(4), varchar_content varchar(256) )charset = utf8; INSERT INTO `test` VALUES (&#39;ab &#39;, &#39;ab &#39;); SELECT length(char_content), length(varchar_content) from `test`; -- 显示 /* +----------------------+-------------------------+ | length(char_content) | length(varchar_content) | +----------------------+-------------------------+ | 2 | 3 | +----------------------+-------------------------+ */  4、当使用varchar时，一个表中的所有字段内容加起来不能超过65535个字节。如：</description>
    </item>
    
    <item>
      <title>MySQL数据类型之数值类型</title>
      <link>https://shawngu.com/2017/04/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shawngu.com/2017/04/mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B/</guid>
      <description>在介绍数据类型前，先简单说一下MySQL表的创建。
基本语法：
 CREATE TABLE table_name ( &amp;ensp;&amp;ensp;field1 datatype, &amp;ensp;&amp;ensp;field2 datatype, &amp;ensp;&amp;ensp;field3 datatype )CHARACTER SET 字符集 COLLATE 校验规则 ENGINE 存储引擎
 其中：
 红色的字为建表关键字，一般大写 field是字段名，如name、age等，一般采用下划线法。 datatype是字段类型，下面介绍 最后是一些额外指定项，如指定字符集、校验规则和存储引擎等  代码：
CREATE TABLE `user` ( id int not null default 0 comment &#39;编号&#39;, name varchar(32) not null default &#39;&#39; comment &#39;用户名&#39; )CHARSET=utf8 COLLATE utf8_general_ci ENGINE = myisam;  说明：
 表名一般使用反引号``括起来，防止和关键字冲突 not null表示该字段的值不能为空 default指定默认值，当不给值时就使用默认值 comment表示对该字段的注释  数据类型 我们在创建表时，字段要设置数据类型，而根据具体的业务选择正确合适的数据类型很重要。
数值型 1、整数
在MySQL中整数类型有五种，见下表：</description>
    </item>
    
    <item>
      <title>MySQL基础之建库相关基本操作语法和一些细节</title>
      <link>https://shawngu.com/2017/04/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BB%BA%E5%BA%93%E7%9B%B8%E5%85%B3%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E8%AF%AD%E6%B3%95%E5%92%8C%E4%B8%80%E4%BA%9B%E7%BB%86%E8%8A%82/</link>
      <pubDate>Fri, 21 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://shawngu.com/2017/04/mysql%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%BB%BA%E5%BA%93%E7%9B%B8%E5%85%B3%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%E8%AF%AD%E6%B3%95%E5%92%8C%E4%B8%80%E4%BA%9B%E7%BB%86%E8%8A%82/</guid>
      <description>MySQL是目前使用的最广泛的关系型数据库管理系统之一，因其开源、免费、轻量、性能优越等优势深受企业的偏爱。
在MySQL中，通过SQL语言，即结构化查询语言进行数据库管理。
SQL语句分类：
 DDL（数据定义语言）：如常见的 create[创建]、drop[删除]、alter[修改] DML（数据操纵语言）：如常见的 insert[添加]、update[修改]、delete[删除] DQL（数据查询语言）：常见就是 select[查询] DCL（数据控制语言）：常见的有 grant[授权]、revoke[回收]、savepoint[事务保存点]、commit[事务提交]、rollback[事务回滚]  数据库创建 使用数据库管理系统，那么首先得有数据库
基本语法  CREATE DATABASE [IF NOT EXISTS] db_name [create_specification,&amp;hellip;]
 其中：
 红色的create database 是建库关键字，关键字一般用大写字母。 中括号[]里内容是可选项，可有可无。 if not exists也是关键字，是指建库时做个判断，防止数据库已存在的问题。 db_name 是将要创建的数据库名，如：user等。 create_specification 是一些额外指定项，如指定字符编码：[default] character set utf8；指定字符校验规则：[default] collate utf8_general_ci(不区分字符大小写)  代码：
CREATE DATABASE `shop`;  说明：建库时，没有指定字符集和检验规则的时候，默认是utf8和utf8_general_ci，而库名上加反引号，用来防止数据库名和关键字一样而引起问题。
创建指定字符集和校验规则的数据库：
-- way1: CREATE DATABASE `shop` CHARACTER SET utf8 COLLATE utf8_general_ci; -- way2: CREATE DATABASE `shop` DEFAULT CHARACTER utf8 COLLATE utf8_general_ci; -- way3: CREATE DATABASE `shop` CHARSET = utf8 COLLATE utf8_general_ci;  注：不同的字符集对应的编码不一样，存储的数据也就不一样，如utf8编码可以存储中文汉字，而latin1编码只能存放字母。另外，检验规则分为区分大小写和不区分大小写两种形式，带_ci表示不区分大小写，而不带的则为区分大小写，如utf8_general_ci不区分大小写，utf8_general区分大小写。</description>
    </item>
    
  </channel>
</rss>